import untypedSettings from '../config/config.json' assert { type: 'json' };
import untypedCredentials from '../config/credentials.json' assert { type: 'json' };
import { MongoClient, Collection } from 'mongodb';
import type { Badge } from '../src/types/badge';
import { Entry } from '../src/types/entry.js';
import { Config } from '../src/types/config.js';
import type { Credentials } from '../src/types/config.js';
import { imgurUpload } from '../src/lib/imgur.js';

const credentials: Credentials = untypedCredentials as Credentials;

const settings = untypedSettings as Config;

const client = new MongoClient(credentials.MongoDB);

async function connect(): Promise<Collection> {
    await client.connect();
    const collection: Collection = client
        .db(settings.DatabaseName)
        .collection(settings.CollectionName);
    return collection;
}

const mongo = await connect();

export async function destroy(): Promise<void> {
    await client.close();
}

const cursor = mongo.find();

async function run() {
    for await (const entry of cursor) {
        for (const badge of entry['badges']) {
            const userId = entry.userId;
            if (badge.imageHash === undefined) {
                const ImgurResponse = await imgurUpload(badge.badge);
                console.log(ImgurResponse);
                if (ImgurResponse) {
                    await mongo.updateOne(
                        { userId },
                        { $set: { imageHash: ImgurResponse.deletehash } },
                    );
                    await mongo.updateOne(
                        { userId },
                        { $set: { badge: ImgurResponse.link } },
                    );
                }
            }
        }
    }
}
await run();

await destroy();

//to delete
/*
T4RBKTz1YrEKj3b
*/
